version: "3.8"

services:
  neo4j:
    image: neo4j:5.12.0
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - ./packages/dataplex/data/neo4j:/data
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_dbms_security_procedures_unrestricted="apoc.*"
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.\\\*,gds.\\\*
      - dbms_connector_bolt_listen__address=neo4j-db:7687
      - dbms_connector_bolt_advertised__address=neo4j-db:7687
      - NEO4J_apoc_import_file_enabled="true"
      - NEO4J_apoc_export_file_enabled="true"
      - NEO4J_ACCEPT_LICENSE_AGREEMENT="yes"
    restart: always
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "cypher-shell -u neo4j -p password 'MATCH (n) RETURN COUNT(n);' || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rlc-net

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./packages/dataplex/data/redis:/data
    restart: always
    command: /bin/sh -c "redis-server --requirepass redis"
    networks:
      - rlc-net

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./packages/dataplex/data/postgres:/var/lib/postgresql/data
      - ./packages/dataplex/init_scripts/postgres:/docker-entrypoint-initdb.d
    restart: always
    command: ["bash", "/docker-entrypoint-initdb.d/init-postgres.sh"]
    networks:
      - rlc-net

  archivist:
    container_name: archivist
    build:
      context: ./
      dockerfile: Dockerfile.prod.archivist
    env_file:
      - ./packages/archivist/.env
    environment:
      - REDIS_URL=redis://redis:6379
    ports:
      - "3000:3000"
    restart: always
    command: ["node", "dist/main.js"]
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_started
      postgres:
        condition: service_started
    networks:
      - rlc-net

  clarity-core:
    image: node:14
    container_name: clarity-core
    working_dir: /usr/src/app
    ports:
      - "3001:3001"
    volumes:
      - ./packages/clarity-core:/usr/src/app
      - /usr/src/app/node_modules
    restart: always
    env_file:
      - ./packages/clarity-core/.env
    command: sh -c "npm install && npx tsc --outDir dist && npm start"
    depends_on:
      - archivist
    networks:
      rlc-net:
        aliases:
          - clarity-core

networks:
  rlc-net:
    name: rlc-net
    driver: bridge
