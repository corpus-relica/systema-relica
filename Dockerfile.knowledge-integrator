# Build stage
FROM node:latest as build
MAINTAINER Marc <marc@speculum-obscurum>

WORKDIR /usr/src/app

# Copy root package files first
COPY package.json .
COPY yarn.lock .

# Copy all the packages and configs
COPY packages_ts/libs/types ./packages_ts/libs/types
COPY packages_ts/libs/constants ./packages_ts/libs/constants
COPY packages_ts/frontend/components/fact-search-ui ./packages_ts/frontend/components/fact-search-ui
COPY packages_ts/frontend/components/3d-graph-ui ./packages_ts/frontend/components/3d-graph-ui
COPY packages_ts/core/hsm-manager ./packages_ts/core/hsm-manager
COPY packages_ts/frontend/knowledge-integrator ./packages_ts/frontend/knowledge-integrator
COPY packages_ts/config/tsconfig.base.json ./packages_ts/config/tsconfig.base.json
COPY packages_ts/config/tsconfig.lib.json ./packages_ts/config/tsconfig.lib.json
COPY packages_ts/config/tsconfig.lib-react.json ./packages_ts/config/tsconfig.lib-react.json
COPY packages_ts/config/tsconfig.frontend.json ./packages_ts/config/tsconfig.frontend.json

# Install dependencies
RUN yarn install --pure-lockfile --non-interactive --network-timeout 100000

# Build packages in order
WORKDIR /usr/src/app/packages_ts/libs/types
RUN yarn build

WORKDIR /usr/src/app/packages_ts/libs/constants
RUN yarn build

WORKDIR /usr/src/app/packages_ts/core/hsm-manager
RUN yarn build

WORKDIR /usr/src/app/packages_ts/frontend/components/fact-search-ui
RUN echo "VITE_RELICA_ARCHIVIST_API_URL=http://localhost:3000" > .env && \
RUN yarn build

WORKDIR /usr/src/app/packages_ts/frontend/components/3d-graph-ui
RUN yarn build

# Build the main application
WORKDIR /usr/src/app/packages_ts/frontend/knowledge-integrator
RUN echo "VITE_RELICA_ARCHIVIST_API_URL=http://localhost:3000" > .env && \
    echo "VITE_RELICA_DB_API_URL=http://localhost:3000" >> .env && \
    echo "VITE_RELICA_CC_API_URL=http://localhost:3001" >> .env && \
    echo "VITE_RELICA_CC_SOCKET_URL=http://localhost:3001" >> .env && \
    echo "VITE_RELICA_NOUS_SOCKET_URL=http://localhost:8080" >> .env
RUN yarn build

# Production stage
FROM nginx:alpine

# Copy nginx config if you need it (commented out for now)
# COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy the built files from build stage to nginx serving directory
COPY --from=build /usr/src/app/packages_ts/frontend/knowledge-integrator/dist /usr/share/nginx/html

# Basic nginx configuration for SPA
RUN echo 'server { \
    listen 80; \
    location / { \
        root /usr/share/nginx/html; \
        index index.html; \
        try_files $uri $uri/ /index.html; \
    } \
    # Enable gzip compression \
    gzip on; \
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; \
    # Cache static assets \
    location /assets { \
        expires 1y; \
        add_header Cache-Control "public, no-transform"; \
        root /usr/share/nginx/html; \
    } \
}' > /etc/nginx/conf.d/default.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]]
